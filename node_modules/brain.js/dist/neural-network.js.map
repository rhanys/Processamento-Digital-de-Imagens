{"version":3,"sources":["../src/neural-network.js"],"names":["NeuralNetwork","options","validations","iterations","val","errorThresh","log","logPeriod","learningRate","momentum","callback","callbackPeriod","timeout","Object","keys","trainDefaults","forEach","hasOwnProperty","key","Error","Infinity","praxis","beta1","beta2","epsilon","leakyReluAlpha","binaryThresh","hiddenLayers","activation","assign","constructor","defaults","trainOpts","updateTrainingOptions","sizes","outputLayer","biases","weights","outputs","deltas","changes","errors","errorCheckInterval","prototype","runInput","calculateDeltas","inputLookup","inputLookupLength","outputLookup","length","layer","size","Array","node","prevSize","setActivation","_runInputSigmoid","_calculateDeltasSigmoid","_runInputRelu","_calculateDeltasRelu","_runInputLeakyRelu","_calculateDeltasLeakyRelu","_runInputTanh","_calculateDeltasTanh","input","isRunnable","lookup","toArray","output","toObject","sum","k","Math","exp","alpha","tanh","data","push","max","floor","initialize","opts","opt","validateTrainingOptions","setLogMethod","reduce","console","i","trainPattern","status","endTime","error","Date","now","calculateTrainingError","trainPatterns","formatData","verifyIsInitialized","prepTraining","_setupAdam","trainingTick","Promise","resolve","reject","thawedTrain","Thaw","delay","each","stop","done","tick","trainError","target","logErrorRate","adjustWeights","incoming","delta","change","biasChangesLow","biasChangesHigh","changesLow","changesHigh","_adjustWeightsAdam","gradient","changeLow","changeHigh","momentumCorrection","pow","gradientCorrection","sqrt","biasGradient","biasChangeLow","biasChangeHigh","biasMomentumCorrection","biasGradientCorrection","isArray","LookupTable","table","outputLookupLength","toTrainingData","inputTable","outputTable","convertInput","getTypedArrayFn","convertOutput","result","value","buffer","ArrayBuffer","arrayToFloat32Array","v","array","Float32Array","p","isBinary","falsePos","falseNeg","truePos","trueNeg","misclasses","actual","expected","indexOf","misclass","map","stats","total","precision","recall","accuracy","layers","nodes","j","bias","index","getTrainOptsJSON","json","toHash","needsVar","nodeHandle","layerNumber","nodeKey","w","join","toJSON","layersAsMath","Function","checkFns","filter","c"],"mappings":"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","file":"neural-network.js","sourcesContent":["import Thaw from 'thaw.js';\nimport lookup from './lookup';\nimport max from './utilities/max';\nimport mse from './utilities/mse';\nimport randos from './utilities/randos';\nimport range from './utilities/range';\nimport toArray from './utilities/to-array';\nimport zeros from './utilities/zeros';\nimport LookupTable from './utilities/lookup-table';\nimport { arrayToFloat32Array } from './utilities/cast';\n\n/**\n * @param {object} options\n * @constructor\n */\nexport default class NeuralNetwork {\n  static get trainDefaults() {\n    return {\n      iterations: 20000,    // the maximum times to iterate the training data\n      errorThresh: 0.005,   // the acceptable error percentage from training data\n      log: false,           // true to use console.log, when a function is supplied it is used\n      logPeriod: 10,        // iterations between logging out\n      learningRate: 0.3,    // multiply's against the input and the delta then adds to momentum\n      momentum: 0.1,        // multiply's against the specified \"change\" then adds to learning rate for change\n      callback: null,       // a periodic call back that can be triggered while training\n      callbackPeriod: 10,   // the number of iterations through the training data between callback calls\n      timeout: Infinity,    // the max number of milliseconds to train for\n      praxis: null,\n      beta1: 0.9,\n      beta2: 0.999,\n      epsilon: 1e-8,\n    };\n  }\n\n  static get defaults() {\n    return {\n      leakyReluAlpha: 0.01,\n      binaryThresh: 0.5,\n      hiddenLayers: [3],     // array of ints for the sizes of the hidden layers in the network\n      activation: 'sigmoid'  // Supported activation types ['sigmoid', 'relu', 'leaky-relu', 'tanh']\n    };\n  }\n\n  /**\n   *\n   * @param options\n   * @private\n   */\n  static validateTrainingOptions(options) {\n    const validations = {\n      iterations: (val) => { return typeof val === 'number' && val > 0; },\n      errorThresh: (val) => { return typeof val === 'number' && val > 0 && val < 1; },\n      log: (val) => { return typeof val === 'function' || typeof val === 'boolean'; },\n      logPeriod: (val) => { return typeof val === 'number' && val > 0; },\n      learningRate: (val) => { return typeof val === 'number' && val > 0 && val < 1; },\n      momentum: (val) => { return typeof val === 'number' && val > 0 && val < 1; },\n      callback: (val) => { return typeof val === 'function' || val === null },\n      callbackPeriod: (val) => { return typeof val === 'number' && val > 0; },\n      timeout: (val) => { return typeof val === 'number' && val > 0 }\n    };\n    Object.keys(NeuralNetwork.trainDefaults).forEach(key => {\n      if (validations.hasOwnProperty(key) && !validations[key](options[key])) {\n        throw new Error(`[${key}, ${options[key]}] is out of normal training range, your network will probably not train.`);\n      }\n    });\n  }\n\n  constructor(options = {}) {\n    Object.assign(this, this.constructor.defaults, options);\n    this.hiddenLayers = options.hiddenLayers;\n    this.trainOpts = {};\n    this.updateTrainingOptions(Object.assign({}, this.constructor.trainDefaults, options));\n\n    this.sizes = null;\n    this.outputLayer = null;\n    this.biases = null; // weights for bias nodes\n    this.weights = null;\n    this.outputs = null;\n\n    // state for training\n    this.deltas = null;\n    this.changes = null; // for momentum\n    this.errors = null;\n    this.errorCheckInterval = 1;\n    if (!this.constructor.prototype.hasOwnProperty('runInput')) {\n      this.runInput = null;\n    }\n    if (!this.constructor.prototype.hasOwnProperty('calculateDeltas')) {\n      this.calculateDeltas = null;\n    }\n    this.inputLookup = null;\n    this.inputLookupLength = null;\n    this.outputLookup = null;\n  }\n\n  /**\n   *\n   * Expects this.sizes to have been set\n   */\n  initialize() {\n    if (!this.sizes) throw new Error ('Sizes must be set before initializing');\n\n    this.outputLayer = this.sizes.length - 1;\n    this.biases = []; // weights for bias nodes\n    this.weights = [];\n    this.outputs = [];\n\n    // state for training\n    this.deltas = [];\n    this.changes = []; // for momentum\n    this.errors = [];\n\n    for (let layer = 0; layer <= this.outputLayer; layer++) {\n      let size = this.sizes[layer];\n      this.deltas[layer] = zeros(size);\n      this.errors[layer] = zeros(size);\n      this.outputs[layer] = zeros(size);\n\n      if (layer > 0) {\n        this.biases[layer] = randos(size);\n        this.weights[layer] = new Array(size);\n        this.changes[layer] = new Array(size);\n\n        for (let node = 0; node < size; node++) {\n          let prevSize = this.sizes[layer - 1];\n          this.weights[layer][node] = randos(prevSize);\n          this.changes[layer][node] = zeros(prevSize);\n        }\n      }\n    }\n\n    this.setActivation();\n  }\n\n  /**\n   *\n   * @param activation supported inputs: 'sigmoid', 'relu', 'leaky-relu', 'tanh'\n   */\n  setActivation(activation) {\n    this.activation = (activation) ? activation : this.activation;\n    switch (this.activation) {\n      case 'sigmoid':\n        this.runInput = this.runInput || this._runInputSigmoid;\n        this.calculateDeltas = this.calculateDeltas || this._calculateDeltasSigmoid;\n        break;\n      case 'relu':\n        this.runInput = this.runInput || this._runInputRelu;\n        this.calculateDeltas = this.calculateDeltas || this._calculateDeltasRelu;\n        break;\n      case 'leaky-relu':\n        this.runInput = this.runInput || this._runInputLeakyRelu;\n        this.calculateDeltas = this.calculateDeltas || this._calculateDeltasLeakyRelu;\n        break;\n      case 'tanh':\n        this.runInput = this.runInput || this._runInputTanh;\n        this.calculateDeltas = this.calculateDeltas || this._calculateDeltasTanh;\n        break;\n      default:\n        throw new Error('unknown activation ' + this.activation + ', The activation should be one of [\\'sigmoid\\', \\'relu\\', \\'leaky-relu\\', \\'tanh\\']');\n    }\n  }\n\n  /**\n   *\n   * @returns boolean\n   */\n  get isRunnable(){\n    if(!this.runInput){\n      console.error('Activation function has not been initialized, did you run train()?');\n      return false;\n    }\n\n    const checkFns = [\n      'sizes',\n      'outputLayer',\n      'biases',\n      'weights',\n      'outputs',\n      'deltas',\n      'changes',\n      'errors',\n    ].filter(c => this[c] === null);\n\n    if(checkFns.length > 0){\n      console.error(`Some settings have not been initialized correctly, did you run train()? Found issues with: ${checkFns.join(', ')}`);\n      return false;\n    }\n    return true;\n  }\n\n\n  /**\n   *\n   * @param input\n   * @returns {*}\n   */\n  run(input) {\n    if (!this.isRunnable) return null;\n    if (this.inputLookup) {\n      input = lookup.toArray(this.inputLookup, input, this.inputLookupLength);\n    }\n\n    let output = this.runInput(input);\n\n    if (this.outputLookup) {\n      output = lookup.toObject(this.outputLookup, output);\n    }\n    return output;\n  }\n\n  /**\n   * trains via sigmoid\n   * @param input\n   * @returns {*}\n   */\n  _runInputSigmoid(input) {\n    this.outputs[0] = input;  // set output state of input layer\n\n    let output = null;\n    for (let layer = 1; layer <= this.outputLayer; layer++) {\n      for (let node = 0; node < this.sizes[layer]; node++) {\n        let weights = this.weights[layer][node];\n\n        let sum = this.biases[layer][node];\n        for (let k = 0; k < weights.length; k++) {\n          sum += weights[k] * input[k];\n        }\n        //sigmoid\n        this.outputs[layer][node] = 1 / (1 + Math.exp(-sum));\n      }\n      output = input = this.outputs[layer];\n    }\n    return output;\n  }\n\n  _runInputRelu(input) {\n    this.outputs[0] = input;  // set output state of input layer\n\n    let output = null;\n    for (let layer = 1; layer <= this.outputLayer; layer++) {\n      for (let node = 0; node < this.sizes[layer]; node++) {\n        let weights = this.weights[layer][node];\n\n        let sum = this.biases[layer][node];\n        for (let k = 0; k < weights.length; k++) {\n          sum += weights[k] * input[k];\n        }\n        //relu\n        this.outputs[layer][node] = (sum < 0 ? 0 : sum);\n      }\n      output = input = this.outputs[layer];\n    }\n    return output;\n  }\n\n  _runInputLeakyRelu(input) {\n    this.outputs[0] = input;  // set output state of input layer\n    let alpha = this.leakyReluAlpha;\n    let output = null;\n    for (let layer = 1; layer <= this.outputLayer; layer++) {\n      for (let node = 0; node < this.sizes[layer]; node++) {\n        let weights = this.weights[layer][node];\n\n        let sum = this.biases[layer][node];\n        for (let k = 0; k < weights.length; k++) {\n          sum += weights[k] * input[k];\n        }\n        //leaky relu\n        this.outputs[layer][node] = (sum < 0 ? 0 : alpha * sum);\n      }\n      output = input = this.outputs[layer];\n    }\n    return output;\n  }\n\n  _runInputTanh(input) {\n    this.outputs[0] = input;  // set output state of input layer\n\n    let output = null;\n    for (let layer = 1; layer <= this.outputLayer; layer++) {\n      for (let node = 0; node < this.sizes[layer]; node++) {\n        let weights = this.weights[layer][node];\n\n        let sum = this.biases[layer][node];\n        for (let k = 0; k < weights.length; k++) {\n          sum += weights[k] * input[k];\n        }\n        //tanh\n        this.outputs[layer][node] = Math.tanh(sum);\n      }\n      output = input = this.outputs[layer];\n    }\n    return output;\n  }\n\n  /**\n   *\n   * @param data\n   * Verifies network sizes are initilaized\n   * If they are not it will initialize them based off the data set.\n   */\n  verifyIsInitialized(data) {\n    if (this.sizes) return;\n\n    this.sizes = [];\n    this.sizes.push(data[0].input.length);\n    if (!this.hiddenLayers) {\n      this.sizes.push(Math.max(3, Math.floor(data[0].input.length / 2)));\n    } else {\n      this.hiddenLayers.forEach(size => {\n        this.sizes.push(size);\n      });\n    }\n    this.sizes.push(data[0].output.length);\n\n    this.initialize();\n  }\n\n  /**\n   *\n   * @param opts\n   *    Supports all `trainDefaults` properties\n   *    also supports:\n   *       learningRate: (number),\n   *       momentum: (number),\n   *       activation: 'sigmoid', 'relu', 'leaky-relu', 'tanh'\n   */\n  updateTrainingOptions(opts) {\n    Object.keys(NeuralNetwork.trainDefaults).forEach(opt => this.trainOpts[opt] = (opts.hasOwnProperty(opt)) ? opts[opt] : this.trainOpts[opt]);\n    NeuralNetwork.validateTrainingOptions(this.trainOpts);\n    this.setLogMethod(opts.log || this.trainOpts.log);\n    this.activation = opts.activation || this.activation;\n  }\n\n  /**\n   *\n   *  Gets JSON of trainOpts object\n   *    NOTE: Activation is stored directly on JSON object and not in the training options\n   */\n  getTrainOptsJSON() {\n    return Object.keys(NeuralNetwork.trainDefaults)\n      .reduce((opts, opt) => {\n        if (opt === 'timeout' && this.trainOpts[opt] === Infinity) return opts;\n        if (this.trainOpts[opt]) opts[opt] = this.trainOpts[opt];\n        if (opt === 'log') opts.log = typeof opts.log === 'function';\n        return opts;\n      }, {});\n  }\n\n  /**\n   *\n   * @param log\n   * if a method is passed in method is used\n   * if false passed in nothing is logged\n   * @returns error\n   */\n  setLogMethod(log) {\n    if (typeof log === 'function'){\n      this.trainOpts.log = log;\n    } else if (log) {\n      this.trainOpts.log = console.log;\n    } else {\n      this.trainOpts.log = false;\n    }\n  }\n\n  /**\n   *\n   * @param data\n   * @returns {Number} error\n   */\n  calculateTrainingError(data) {\n    let sum = 0;\n    for (let i = 0; i < data.length; ++i) {\n      sum += this.trainPattern(data[i].input, data[i].output, true);\n    }\n    return sum / data.length;\n  }\n\n  /**\n   * @param data\n   * @private\n   */\n  trainPatterns(data) {\n    for (let i = 0; i < data.length; ++i) {\n      this.trainPattern(data[i].input, data[i].output, false);\n    }\n  }\n\n  /**\n   *\n   * @param {object} data\n   * @param {object} status { iterations: number, error: number }\n   * @param endTime\n   */\n  trainingTick(data, status, endTime) {\n    if (status.iterations >= this.trainOpts.iterations || status.error <= this.trainOpts.errorThresh || Date.now() >= endTime) {\n      return false;\n    }\n\n    status.iterations++;\n\n    if (this.trainOpts.log && (status.iterations % this.trainOpts.logPeriod === 0)) {\n      status.error = this.calculateTrainingError(data);\n      this.trainOpts.log(`iterations: ${status.iterations}, training error: ${status.error}`);\n    } else {\n      if (status.iterations % this.errorCheckInterval === 0) {\n        status.error = this.calculateTrainingError(data);\n      } else {\n        this.trainPatterns(data);\n      }\n    }\n\n    if (this.trainOpts.callback && (status.iterations % this.trainOpts.callbackPeriod === 0)) {\n      this.trainOpts.callback({\n        iterations: status.iterations,\n        error: status.error\n      });\n    }\n    return true;\n  }\n\n  /**\n   *\n   * @param data\n   * @param options\n   * @protected\n   * @return { data, status, endTime }\n   */\n  prepTraining(data, options) {\n    this.updateTrainingOptions(options);\n    data = this.formatData(data);\n    const endTime = Date.now() + this.trainOpts.timeout;\n\n    const status = {\n      error: 1,\n      iterations: 0\n    };\n\n    this.verifyIsInitialized(data);\n\n    return {\n      data,\n      status,\n      endTime\n    };\n  }\n\n  /**\n   *\n   * @param data\n   * @param options\n   * @returns {{error: number, iterations: number}}\n   */\n  train(data, options = {}) {\n    let status, endTime;\n    ({ data, status, endTime } = this.prepTraining(data, options));\n\n    if (options.praxis === 'adam') {\n      this._setupAdam();\n    }\n\n    while (this.trainingTick(data, status, endTime));\n    return status;\n  }\n\n  /**\n   *\n   * @param data\n   * @param options\n   * @returns {Promise}\n   * @resolves {{error: number, iterations: number}}\n   * @rejects {{trainError: string, status: {error: number, iterations: number}}\n   */\n  trainAsync(data, options = {}) {\n    let status, endTime;\n    ({ data, status, endTime } = this.prepTraining(data, options));\n\n    return new Promise((resolve, reject) => {\n      try {\n        const thawedTrain = new Thaw(new Array(this.trainOpts.iterations), {\n          delay: true,\n          each: () => this.trainingTick(data, status, endTime) || thawedTrain.stop(),\n          done: () => resolve(status)\n        });\n        thawedTrain.tick();\n      } catch (trainError) {\n        reject({trainError, status});\n      }\n    });\n  }\n\n  /**\n   *\n   * @param input\n   * @param target\n   */\n  trainPattern(input, target, logErrorRate) {\n\n    // forward propagate\n    this.runInput(input);\n\n    // back propagate\n    this.calculateDeltas(target);\n    this.adjustWeights();\n\n    if  (logErrorRate) {\n      return mse(this.errors[this.outputLayer]);\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   *\n   * @param target\n   */\n  _calculateDeltasSigmoid(target) {\n    for (let layer = this.outputLayer; layer >= 0; layer--) {\n      for (let node = 0; node < this.sizes[layer]; node++) {\n        let output = this.outputs[layer][node];\n\n        let error = 0;\n        if (layer === this.outputLayer) {\n          error = target[node] - output;\n        }\n        else {\n          let deltas = this.deltas[layer + 1];\n          for (let k = 0; k < deltas.length; k++) {\n            error += deltas[k] * this.weights[layer + 1][k][node];\n          }\n        }\n        this.errors[layer][node] = error;\n        this.deltas[layer][node] = error * output * (1 - output);\n      }\n    }\n  }\n\n  /**\n   *\n   * @param target\n   */\n  _calculateDeltasRelu(target) {\n    for (let layer = this.outputLayer; layer >= 0; layer--) {\n      for (let node = 0; node < this.sizes[layer]; node++) {\n        let output = this.outputs[layer][node];\n\n        let error = 0;\n        if (layer === this.outputLayer) {\n          error = target[node] - output;\n        }\n        else {\n          let deltas = this.deltas[layer + 1];\n          for (let k = 0; k < deltas.length; k++) {\n            error += deltas[k] * this.weights[layer + 1][k][node];\n          }\n        }\n        this.errors[layer][node] = error;\n        this.deltas[layer][node] = output > 0 ? error : 0;\n      }\n    }\n  }\n\n  /**\n   *\n   * @param target\n   */\n  _calculateDeltasLeakyRelu(target) {\n    let alpha = this.leakyReluAlpha;\n    for (let layer = this.outputLayer; layer >= 0; layer--) {\n      for (let node = 0; node < this.sizes[layer]; node++) {\n        let output = this.outputs[layer][node];\n\n        let error = 0;\n        if (layer === this.outputLayer) {\n          error = target[node] - output;\n        }\n        else {\n          let deltas = this.deltas[layer + 1];\n          for (let k = 0; k < deltas.length; k++) {\n            error += deltas[k] * this.weights[layer + 1][k][node];\n          }\n        }\n        this.errors[layer][node] = error;\n        this.deltas[layer][node] = output > 0 ? error : alpha * error;\n      }\n    }\n  }\n\n  /**\n   *\n   * @param target\n   */\n  _calculateDeltasTanh(target) {\n    for (let layer = this.outputLayer; layer >= 0; layer--) {\n      for (let node = 0; node < this.sizes[layer]; node++) {\n        let output = this.outputs[layer][node];\n\n        let error = 0;\n        if (layer === this.outputLayer) {\n          error = target[node] - output;\n        }\n        else {\n          let deltas = this.deltas[layer + 1];\n          for (let k = 0; k < deltas.length; k++) {\n            error += deltas[k] * this.weights[layer + 1][k][node];\n          }\n        }\n        this.errors[layer][node] = error;\n        this.deltas[layer][node] = (1 - output * output) * error;\n      }\n    }\n  }\n\n  /**\n   *\n   * Changes weights of networks\n   */\n  adjustWeights() {\n    for (let layer = 1; layer <= this.outputLayer; layer++) {\n      let incoming = this.outputs[layer - 1];\n\n      for (let node = 0; node < this.sizes[layer]; node++) {\n        let delta = this.deltas[layer][node];\n\n        for (let k = 0; k < incoming.length; k++) {\n          let change = this.changes[layer][node][k];\n\n          change = (this.trainOpts.learningRate * delta * incoming[k])\n            + (this.trainOpts.momentum * change);\n\n          this.changes[layer][node][k] = change;\n          this.weights[layer][node][k] += change;\n        }\n        this.biases[layer][node] += this.trainOpts.learningRate * delta;\n      }\n    }\n  }\n\n  _setupAdam() {\n    this.biasChangesLow = [];\n    this.biasChangesHigh = [];\n    this.changesLow = [];\n    this.changesHigh = [];\n    this.iterations = 0;\n\n    for (let layer = 0; layer <= this.outputLayer; layer++) {\n      let size = this.sizes[layer];\n      if (layer > 0) {\n        this.biasChangesLow[layer] = zeros(size);\n        this.biasChangesHigh[layer] = zeros(size);\n        this.changesLow[layer] = new Array(size);\n        this.changesHigh[layer] = new Array(size);\n\n        for (let node = 0; node < size; node++) {\n          let prevSize = this.sizes[layer - 1];\n          this.changesLow[layer][node] = zeros(prevSize);\n          this.changesHigh[layer][node] = zeros(prevSize);\n        }\n      }\n    }\n\n    this.adjustWeights = this._adjustWeightsAdam;\n  }\n\n  _adjustWeightsAdam() {\n    const trainOpts = this.trainOpts;\n    this.iterations++;\n\n    for (let layer = 1; layer <= this.outputLayer; layer++) {\n      const incoming = this.outputs[layer - 1];\n\n      for (let node = 0; node < this.sizes[layer]; node++) {\n        const delta = this.deltas[layer][node];\n\n        for (let k = 0; k < incoming.length; k++) {\n          const gradient = delta * incoming[k];\n          const changeLow = this.changesLow[layer][node][k] * trainOpts.beta1 + (1 - trainOpts.beta1) * gradient;\n          const changeHigh = this.changesHigh[layer][node][k] * trainOpts.beta2 + (1 - trainOpts.beta2) * gradient * gradient;\n\n          const momentumCorrection = changeLow / (1 - Math.pow(trainOpts.beta1, this.iterations));\n          const gradientCorrection = changeHigh / (1 - Math.pow(trainOpts.beta2, this.iterations));\n\n          this.changesLow[layer][node][k] = changeLow;\n          this.changesHigh[layer][node][k] = changeHigh;\n          this.weights[layer][node][k] += this.trainOpts.learningRate * momentumCorrection / (Math.sqrt(gradientCorrection) + trainOpts.epsilon);\n        }\n\n        const biasGradient = this.deltas[layer][node];\n        const biasChangeLow = this.biasChangesLow[layer][node] * trainOpts.beta1 + (1 - trainOpts.beta1) * biasGradient;\n        const biasChangeHigh = this.biasChangesHigh[layer][node] * trainOpts.beta2 + (1 - trainOpts.beta2) * biasGradient * biasGradient;\n\n        const biasMomentumCorrection = this.biasChangesLow[layer][node] / (1 - Math.pow(trainOpts.beta1, this.iterations));\n        const biasGradientCorrection = this.biasChangesHigh[layer][node] / (1 - Math.pow(trainOpts.beta2, this.iterations));\n\n        this.biasChangesLow[layer][node] = biasChangeLow;\n        this.biasChangesHigh[layer][node] = biasChangeHigh;\n        this.biases[layer][node] += trainOpts.learningRate * biasMomentumCorrection / (Math.sqrt(biasGradientCorrection) + trainOpts.epsilon);\n      }\n    }\n  }\n\n  /**\n   *\n   * @param data\n   * @returns {*}\n   */\n  formatData(data) {\n    if (!Array.isArray(data)) { // turn stream datum into array\n      data = [data];\n    }\n\n    if (!Array.isArray(data[0].input)) {\n      if (this.inputLookup) {\n        this.inputLookupLength = Object.keys(this.inputLookup).length;\n      } else {\n        const inputLookup = new LookupTable(data, 'input');\n        this.inputLookup = inputLookup.table;\n        this.inputLookupLength = inputLookup.length;\n      }\n\n    }\n\n    if (!Array.isArray(data[0].output)) {\n      if (this.outputLookup) {\n        this.outputLookupLength = Object.keys(this.outputLookup).length;\n      } else {\n        const lookup = new LookupTable(data, 'output');\n        this.outputLookup = lookup.table;\n        this.outputLookupLength = lookup.length;\n      }\n    }\n\n    function toTrainingData(data, inputTable, outputTable) {\n      // turn sparse hash input into arrays with 0s as filler\n      const convertInput = getTypedArrayFn(data[0].input, inputTable);\n      const convertOutput = getTypedArrayFn(data[0].output, outputTable);\n      const result = [];\n      if (convertInput && convertOutput) {\n        for (let i = 0; i < data.length; i++) {\n          result.push({\n            input: convertInput(data[i].input),\n            output: convertOutput(data[i].output),\n          });\n        }\n      } else if (convertInput) {\n        for (let i = 0; i < data.length; i++) {\n          result.push({\n            input: convertInput(data[i].input),\n            output: data[i].output\n          });\n        }\n      } else if (convertOutput) {\n        for (let i = 0; i < data.length; i++) {\n          result.push({\n            input: data[i].input,\n            output: convertOutput(data[i].output)\n          });\n        }\n      } else {\n        return data;\n      }\n      return result;\n    }\n\n    function getTypedArrayFn(value, table) {\n      if (value.buffer instanceof ArrayBuffer) {\n        return null;\n      } else if (Array.isArray(value)) {\n        return arrayToFloat32Array;\n      } else {\n        const length = Object.keys(table).length;\n        return (v) => {\n          const array = new Float32Array(length);\n          for (let p in table) {\n            array[table[p]] = v[p] || 0;\n          }\n          return array;\n        }\n      }\n    }\n\n    return toTrainingData(data, this.inputLookup, this.outputLookup);\n  }\n\n  /**\n   *\n   * @param data\n   * @returns {\n   *  {\n   *    error: number,\n   *    misclasses: Array\n   *  }\n   * }\n   */\n  test(data) {\n    data = this.formatData(data);\n\n    // for binary classification problems with one output node\n    let isBinary = data[0].output.length === 1;\n    let falsePos = 0;\n    let falseNeg = 0;\n    let truePos = 0;\n    let trueNeg = 0;\n\n    // for classification problems\n    let misclasses = [];\n\n    // run each pattern through the trained network and collect\n    // error and misclassification statistics\n    let sum = 0;\n    for (let i = 0; i < data.length; i++) {\n      let output = this.runInput(data[i].input);\n      let target = data[i].output;\n\n      let actual, expected;\n      if (isBinary) {\n        actual = output[0] > this.binaryThresh ? 1 : 0;\n        expected = target[0];\n      }\n      else {\n        actual = output.indexOf(max(output));\n        expected = target.indexOf(max(target));\n      }\n\n      if (actual !== expected) {\n        let misclass = data[i];\n        Object.assign(misclass, {\n          actual: actual,\n          expected: expected\n        });\n        misclasses.push(misclass);\n      }\n\n      if (isBinary) {\n        if (actual === 0 && expected === 0) {\n          trueNeg++;\n        } else if (actual === 1 && expected === 1) {\n          truePos++;\n        } else if (actual === 0 && expected === 1) {\n          falseNeg++;\n        } else if (actual === 1 && expected === 0) {\n          falsePos++;\n        }\n      }\n\n      let errors = output.map((value, i) => {\n        return target[i] - value;\n      });\n      sum += mse(errors);\n    }\n    let error = sum / data.length;\n\n    let stats = {\n      error: error,\n      misclasses: misclasses\n    };\n\n    if (isBinary) {\n      Object.assign(stats, {\n        trueNeg: trueNeg,\n        truePos: truePos,\n        falseNeg: falseNeg,\n        falsePos: falsePos,\n        total: data.length,\n        precision: truePos > 0 ? truePos / (truePos + falsePos) : 0,\n        recall: truePos > 0 ? truePos / (truePos + falseNeg) : 0,\n        accuracy: (trueNeg + truePos) / data.length\n      });\n    }\n    return stats;\n  }\n\n  /**\n   *\n   * @returns\n   *  {\n   *    layers: [\n   *      {\n   *        x: {},\n   *        y: {}\n   *      },\n   *      {\n   *        '0': {\n   *          bias: -0.98771313,\n   *          weights: {\n   *            x: 0.8374838,\n   *            y: 1.245858\n   *          },\n   *        '1': {\n   *          bias: 3.48192004,\n   *          weights: {\n   *            x: 1.7825821,\n   *            y: -2.67899\n   *          }\n   *        }\n   *      },\n   *      {\n   *        f: {\n   *          bias: 0.27205739,\n   *          weights: {\n   *            '0': 1.3161821,\n   *            '1': 2.00436\n   *          }\n   *        }\n   *      }\n   *    ]\n   *  }\n   */\n  toJSON() {\n    let layers = [];\n    for (let layer = 0; layer <= this.outputLayer; layer++) {\n      layers[layer] = {};\n\n      let nodes;\n      // turn any internal arrays back into hashes for readable json\n      if (layer === 0 && this.inputLookup) {\n        nodes = Object.keys(this.inputLookup);\n      }\n      else if (layer === this.outputLayer && this.outputLookup) {\n        nodes = Object.keys(this.outputLookup);\n      }\n      else {\n        nodes = range(0, this.sizes[layer]);\n      }\n\n      for (let j = 0; j < nodes.length; j++) {\n        let node = nodes[j];\n        layers[layer][node] = {};\n\n        if (layer > 0) {\n          layers[layer][node].bias = this.biases[layer][j];\n          layers[layer][node].weights = {};\n          for (let k in layers[layer - 1]) {\n            let index = k;\n            if (layer === 1 && this.inputLookup) {\n              index = this.inputLookup[k];\n            }\n            layers[layer][node].weights[k] = this.weights[layer][j][index];\n          }\n        }\n      }\n    }\n    return {\n      sizes: this.sizes,\n      layers,\n      outputLookup: this.outputLookup !== null,\n      inputLookup: this.inputLookup !== null,\n      activation: this.activation,\n      trainOpts: this.getTrainOptsJSON()\n    };\n  }\n\n  /**\n   *\n   * @param json\n   * @returns {NeuralNetwork}\n   */\n  fromJSON(json) {\n    this.sizes = json.sizes;\n    this.initialize();\n\n    for (let i = 0; i <= this.outputLayer; i++) {\n      let layer = json.layers[i];\n      if (i === 0 && (!layer[0] || json.inputLookup)) {\n        this.inputLookup = lookup.toHash(layer);\n        this.inputLookupLength = Object.keys(this.inputLookup).length;\n      }\n      else if (i === this.outputLayer && (!layer[0] || json.outputLookup)) {\n        this.outputLookup = lookup.toHash(layer);\n      }\n      if (i > 0) {\n        const nodes = Object.keys(layer);\n        this.sizes[i] = nodes.length;\n        for (let j in nodes) {\n          const node = nodes[j];\n          this.biases[i][j] = layer[node].bias;\n          this.weights[i][j] = toArray(layer[node].weights);\n        }\n      }\n    }\n    if (json.hasOwnProperty('trainOpts')) {\n      this.updateTrainingOptions(json.trainOpts);\n    }\n    this.setActivation(this.activation || 'sigmoid');\n    return this;\n  }\n\n  /**\n   *\n   * @returns {Function}\n   */\n  toFunction() {\n    const activation = this.activation;\n    const leakyReluAlpha = this.leakyReluAlpha;\n    let needsVar = false;\n    function nodeHandle(layers, layerNumber, nodeKey) {\n      if (layerNumber === 0) {\n        return (typeof nodeKey === 'string'\n          ? `input['${nodeKey}']`\n          : `input[${nodeKey}]`);\n      }\n\n      const layer = layers[layerNumber];\n      const node = layer[nodeKey];\n      let result = ['(' , node.bias];\n      for (let w in node.weights) {\n        if (node.weights[w] < 0) {\n          result.push(`${node.weights[w]}*${nodeHandle(layers, layerNumber - 1, w)}`);\n        } else {\n          result.push(`+${node.weights[w]}*${nodeHandle(layers, layerNumber - 1, w)}`);\n        }\n      }\n      result.push(')');\n\n      switch (activation) {\n        case 'sigmoid':\n          return `1/(1+1/Math.exp(${result.join('')}))`;\n        case 'relu': {\n          needsVar = true;\n          return `((v=${result.join('')})<0?0:v)`;\n        }\n        case 'leaky-relu': {\n          needsVar = true;\n          return `((v=${result.join('')})<0?0:${leakyReluAlpha}*v)`;\n        }\n        case 'tanh':\n          return `Math.tanh(${result.join('')})`;\n        default:\n          throw new Error('unknown activation type ' + activation);\n      }\n    }\n\n    const layers = this.toJSON().layers;\n    const layersAsMath = [];\n    let result;\n    for (let i in layers[layers.length - 1]) {\n      layersAsMath.push(nodeHandle(layers, layers.length - 1, i));\n    }\n    if (this.outputLookup) {\n      result = `{${\n        Object.keys(this.outputLookup)\n          .map((key, i) => `'${key}':${layersAsMath[i]}`)\n        }}`;\n    } else {\n      result = `[${layersAsMath.join(',')}]`;\n    }\n\n    return new Function('input', `${ needsVar ? 'var v;' : '' }return ${result};`);\n  }\n}\n"]}